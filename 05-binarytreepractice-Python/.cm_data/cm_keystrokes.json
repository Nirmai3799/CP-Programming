{
    "binarytree.py": [
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:17",
            "keyStrokeInfo": "",
            "position": "1,1"
        },
        {
            "operation": "PASTE",
            "lines": 33,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:18",
            "keyStrokeInfo": "class Node(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.left = None\r\n        self.right = None\r\n \r\nclass BinaryTree(object):\r\n    def __init__(self, root):\r\n        self.root = Node(root)\r\n \r\n    def search(self, find_val):\r\n        \"\"\"Return True if the find_val is in the tree and False otherwise.\"\"\"\r\n        return self.preorder_search(self.root, find_val)\r\n \r\n    def print_tree(self):\r\n        \"\"\"Print out all tree nodes as they are visited in a pre-order traversal.\"\"\"\r\n        self.preorder_print(self.root)\r\n \r\n    def preorder_search(self, start, find_val):\r\n        \"\"\"Helper method - use this to create a recursive search solution.\"\"\"\r\n        if start ==None:\r\n            return False\r\n        if start.value == find_val:\r\n            return True\r\n return self.preorder_search(start.left, find_val) or self.preorder_search(start.right, find_val)\r\n \r\n    def preorder_print(self, start, traversal):\r\n        \"\"\"Helper method - use this to create a recursive print solution.\"\"\"\r\n        if start is None:\r\n            return\r\n        print(start.value)\r\n        self.preorder_print(start.left)\r\n        self.preorder_print(start.right)\r\n",
            "position": "1,1"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:22",
            "keyStrokeInfo": "",
            "position": "1,1"
        },
        {
            "operation": "PASTE",
            "lines": 33,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:26",
            "keyStrokeInfo": "class Node(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.left = None\r\n        self.right = None\r\n \r\nclass BinaryTree(object):\r\n    def __init__(self, root):\r\n        self.root = Node(root)\r\n \r\n    def search(self, find_val):\r\n        \"\"\"Return True if the find_val is in the tree and False otherwise.\"\"\"\r\n        return self.preorder_search(self.root, find_val)\r\n \r\n    def print_tree(self):\r\n        \"\"\"Print out all tree nodes as they are visited in a pre-order traversal.\"\"\"\r\n        self.preorder_print(self.root)\r\n \r\n    def preorder_search(self, start, find_val):\r\n        \"\"\"Helper method - use this to create a recursive search solution.\"\"\"\r\n        if start ==None:\r\n            return False\r\n        if start.value == find_val:\r\n            return True\r\n return self.preorder_search(start.left, find_val) or self.preorder_search(start.right, find_val)\r\n \r\n    def preorder_print(self, start, traversal):\r\n        \"\"\"Helper method - use this to create a recursive print solution.\"\"\"\r\n        if start is None:\r\n            return\r\n        print(start.value)\r\n        self.preorder_print(start.left)\r\n        self.preorder_print(start.right)\r\n",
            "position": "1,1"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:40",
            "keyStrokeInfo": "",
            "position": "25,1"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:40",
            "keyStrokeInfo": "",
            "position": "24,24"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:41",
            "keyStrokeInfo": "\r\n            ",
            "position": "24,24"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:41",
            "keyStrokeInfo": "",
            "position": "25,9"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:11:42",
            "keyStrokeInfo": "",
            "position": "25,5"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:12:27",
            "keyStrokeInfo": "",
            "position": "25,1"
        },
        {
            "operation": "DELETE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:12:28",
            "keyStrokeInfo": "",
            "position": "24,24"
        },
        {
            "operation": "PASTE",
            "lines": 1,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:12:28",
            "keyStrokeInfo": "\r\n            ",
            "position": "24,24"
        },
        {
            "operation": "DELETE",
            "lines": 0,
            "keyStrokeTimeStamp": "Thu Aug 19 2021 15:12:29",
            "keyStrokeInfo": "",
            "position": "25,9"
        }
    ]
}